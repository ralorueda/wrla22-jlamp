mod TEST-PROTOCOL is
  protecting NARROWING .
  protecting BRANDS-CHAUM .
endm

reduce in TEST-PROTOCOL :
        narrowing(upModule('BRANDS-CHAUM, false),
              --- INITIAL TERM
              upTerm(
              {(
              --- Intruder
              [nilEe, 
                -(CommitB:NTMsg                                         @ b : bx:Real,by:Real,bz:Real,t1':Real -> i : t1'':Real),
                        {(t1'':Real === t1':Real + dbi:Real) and dbi:Real > 0/1},                
                +(CommitB:NTMsg                                         @ i : ix:Real,iy:Real,iz:Real,t1:Real -> a : t2:Real),
                -(NA:Nonce                                              @ a : ax:Real,ay:Real,az:Real,t2:Real -> i : t2''':Real),
                        {(t2''':Real === t2:Real + dai:Real) and dai:Real > 0/1},
                +(NA:Nonce                                              @ i : ix:Real,iy:Real,iz:Real,t2'':Real -> b : t3':Real),
                -((NA':Nonce * NB':Nonce)                                 @ b : bx:Real,by:Real,bz:Real,t3':Real -> i : t3'':Real),
                        {(t3'':Real === t3':Real + dbi:Real) and dbi:Real > 0/1},
                +((NA':Nonce * NB':Nonce)                                 @ i : ix:Real,iy:Real,iz:Real,t3:Real -> a : t4:Real)
              | nileE]
              &
              --- Alice, verifier
              [nilEe,
                -(CommitB:NTMsg                                         @ i : ix:Real,iy:Real,iz:Real,t1:Real -> a : t2:Real),
                        {(t2:Real === t1:Real + dai:Real) and (dai:Real > 0/1) and 
                        ((dai:Real * dai:Real) === (((ix:Real - ax:Real) * (ix:Real - ax:Real)) + 
                        ((iy:Real - ay:Real) * (iy:Real - ay:Real))) + ((iz:Real - az:Real) * (iz:Real - az:Real)))},
                +(n(a,ra1)                                              @ a : ax:Real,ay:Real,az:Real,t2:Real -> i : t2''':Real),
                -((n(a,ra1) * NB:Nonce)                                 @ i : ix:Real,iy:Real,iz:Real,t3:Real -> a : t4:Real),
                        {(t4:Real === (t3:Real + dai:Real)) and (dai:Real > 0/1) and
                        ((dai:Real * dai:Real) === (((ix:Real - ax:Real) * (ix:Real - ax:Real)) + 
                        ((iy:Real - ay:Real) * (iy:Real - ay:Real))) + ((iz:Real - az:Real) * (iz:Real - az:Real)))},
                        {((t4:Real - t2:Real) <= (2/1 * d:Real)) and (d:Real > 0/1)} 
              | nileE]
              &
              --- Bob, prover
              [nilEe,  
                +(commit(n(b,rb1),s(b,rb2))                             @ b : bx:Real,by:Real,bz:Real,t1':Real -> i : t1'':Real),
                -(NA:Nonce                                              @ i : ix:Real,iy:Real,iz:Real,t2'':Real -> b : t3':Real),
                        {(t3':Real === (t2'':Real + dbi:Real)) and (dbi:Real > 0/1) and
                        ((dbi:Real * dbi:Real) === ((((ix:Real - bx:Real) * (ix:Real - bx:Real)) + 
                        ((iy:Real - by:Real) * (iy:Real - by:Real))) + ((iz:Real - bz:Real) * (iz:Real - bz:Real))))},
                +((NA:Nonce * n(b,rb1))                                 @ b : bx:Real,by:Real,bz:Real,t3':Real -> i : t3'':Real) 
              | nileE]) 
              --- Intruder Knowledge
              { 
                inI(commit(n(b,rb1),s(b,rb2))                             @ b : bx:Real,by:Real,bz:Real,t1':Real -> i : t1'':Real),
                inI(commit(n(b,rb1),s(b,rb2))                             @ i : ix:Real,iy:Real,iz:Real,t1:Real -> a : t2:Real),
                inI(n(a,ra1)                                              @ a : ax:Real,ay:Real,az:Real,t2:Real -> i : t2''':Real),
                inI(n(a,ra1)                                              @ i : ix:Real,iy:Real,iz:Real,t2'':Real -> b : t3':Real),
                inI((n(a,ra1) * n(b,rb1))                                 @ b : bx:Real,by:Real,bz:Real,t3':Real -> i : t3'':Real),
                inI((n(a,ra1) * n(b,rb1))                                 @ i : ix:Real,iy:Real,iz:Real,t3:Real -> a : t4:Real)       
              }
              }), 
              =>*,
              --- FINAL TERM
              upTerm(
              {(
              --- Intruder
              [nilEe | 
                -(CommitB:NTMsg                                         @ b : bx:Real,by:Real,bz:Real,t1':Real -> i : t1'':Real),
                        {(t1'':Real === t1':Real + dbi:Real) and dbi:Real > 0/1},                
                +(CommitB:NTMsg                                         @ i : ix:Real,iy:Real,iz:Real,t1:Real -> a : t2:Real),
                -(NA:Nonce                                              @ a : ax:Real,ay:Real,az:Real,t2:Real -> i : t2''':Real),
                        {(t2''':Real === t2:Real + dai:Real) and dai:Real > 0/1},
                +(NA:Nonce                                              @ i : ix:Real,iy:Real,iz:Real,t2'':Real -> b : t3':Real),
                -((NA':Nonce * NB':Nonce)                                 @ b : bx:Real,by:Real,bz:Real,t3':Real -> i : t3'':Real),
                        {(t3'':Real === t3':Real + dbi:Real) and dbi:Real > 0/1},
                +((NA':Nonce * NB':Nonce)                                 @ i : ix:Real,iy:Real,iz:Real,t3:Real -> a : t4:Real),
              nileE]
              &
              --- Alice, verifier
              [nilEe | 
                -(CommitB:NTMsg                                         @ i : ix:Real,iy:Real,iz:Real,t1:Real -> a : t2:Real),
                        {(t2:Real === t1:Real + dai:Real) and (dai:Real > 0/1) and 
                        ((dai:Real * dai:Real) === (((ix:Real - ax:Real) * (ix:Real - ax:Real)) + 
                        ((iy:Real - ay:Real) * (iy:Real - ay:Real))) + ((iz:Real - az:Real) * (iz:Real - az:Real)))},
                +(n(a,ra1)                                              @ a : ax:Real,ay:Real,az:Real,t2:Real -> i : t2''':Real),
                -((n(a,ra1) * NB:Nonce)                                 @ i : ix:Real,iy:Real,iz:Real,t3:Real -> a : t4:Real),
                        {(t4:Real === (t3:Real + dai:Real)) and (dai:Real > 0/1) and
                        ((dai:Real * dai:Real) === (((ix:Real - ax:Real) * (ix:Real - ax:Real)) + 
                        ((iy:Real - ay:Real) * (iy:Real - ay:Real))) + ((iz:Real - az:Real) * (iz:Real - az:Real)))},
                        {((t4:Real - t2:Real) <= (2/1 * d:Real)) and (d:Real > 0/1)},  
              nileE]
              &
              --- Bob, prover
              [nilEe |  
                +(commit(n(b,rb1),s(b,rb2))                             @ b : bx:Real,by:Real,bz:Real,t1':Real -> i : t1'':Real),
                -(NA:Nonce                                              @ i : ix:Real,iy:Real,iz:Real,t2'':Real -> b : t3':Real),
                        {(t3':Real === (t2'':Real + dbi:Real)) and (dbi:Real > 0/1) and
                        ((dbi:Real * dbi:Real) === ((((ix:Real - bx:Real) * (ix:Real - bx:Real)) + 
                        ((iy:Real - by:Real) * (iy:Real - by:Real))) + ((iz:Real - bz:Real) * (iz:Real - bz:Real))))},
                +((NA:Nonce * n(b,rb1))                                 @ b : bx:Real,by:Real,bz:Real,t3':Real -> i : t3'':Real), 
              nileE]) 
              --- Intruder Knowledge
              { 
                nI(commit(n(b,rb1),s(b,rb2))                             @ b : bx:Real,by:Real,bz:Real,t1':Real -> i : t1'':Real),
                nI(commit(n(b,rb1),s(b,rb2))                             @ i : ix:Real,iy:Real,iz:Real,t1:Real -> a : t2:Real),
                nI(n(a,ra1)                                              @ a : ax:Real,ay:Real,az:Real,t2:Real -> i : t2''':Real),
                nI(n(a,ra1)                                              @ i : ix:Real,iy:Real,iz:Real,t2'':Real -> b : t3':Real),
                nI((n(a,ra1) * n(b,rb1))                                 @ b : bx:Real,by:Real,bz:Real,t3':Real -> i : t3'':Real),
                nI((n(a,ra1) * n(b,rb1))                                 @ i : ix:Real,iy:Real,iz:Real,t3:Real -> a : t4:Real)       
              }
              }), 
              smt canonical, none, empty, 'true.Boolean, '@, unbounded, unbounded) .