mod TEST-PROTOCOL is
  protecting NARROWING .
  protecting BRANDS-CHAUM .
endm

reduce in TEST-PROTOCOL :
        narrowing(upModule('BRANDS-CHAUM, false),
              --- INITIAL TERM
              upTerm(
              {(
              --- Intruder
              [nilEe, 
                -((NA':Nonce * NB':Nonce)                                 @ b : t3:Real -> (a : t4:Real) # i : t4':Real), 
                        {t4':Real === t3:Real + dbi:Real and dbi:Real >= 0/1}, 
                -(NA:Nonce                                              @ a : t2:Real -> (b : t3:Real) # i : t3':Real), 
                        {t3':Real === t2:Real + dai:Real and dai:Real >= 0/1}, 
                +(sign(i, (NA':Nonce * NB':Nonce) ; (NA:Nonce))            @ i : t6:Real -> a : t7:Real) 
              | nileE]  
              & 
              --- Alice, verifier
              [nilEe, 
                -(CommitB:NTMsg                                         @ b : t1:Real -> (a : t2:Real) # i : t2':Real), 
                        {t2:Real === t1:Real + dab:Real and dab:Real > 0/1}, 
                +(n(a, ra1)                                             @ a : t2:Real -> (b : t3:Real) # i : t3':Real), 
                -((n(a, ra1) * NB:Nonce)                                @ b : t3:Real -> (a : t4:Real) # i : t4':Real), 
                        {t4:Real === t3:Real + dab:Real and dab:Real > 0/1}, 
                        {(t4:Real - t2:Real) <= (2/1 * d:Real) and d:Real > 0/1}, 
                -(SB:Secret                                             @ b : t3:Real -> (a : t5:Real) # i : t5':Real), 
                        {t5:Real === t3:Real + dab:Real and dab:Real > 0/1}, 
                -(sign(i, (n(a, ra1) * NB:Nonce) ; n(a, ra1))           @ i : t6:Real -> a : t7:Real), 
                        {t7:Real === t6:Real + dai:Real and dai:Real > 0/1} 
              | nileE]  
              & 
              --- Bob, prover
              [nilEe, 
                +(commit(n(b, rb1), s(b, rb2))                          @ b : t1:Real -> (a : t2:Real) # i : t2':Real), 
                -(NA:Nonce                                              @ a : t2:Real -> (b : t3:Real) # i : t3':Real), 
                        {t3:Real === t2:Real + dab:Real and dab:Real > 0/1}, 
                +((NA:Nonce * n(b, rb1))                                @ b : t3:Real -> (a : t4:Real) # i : t4':Real), 
                +(s(b, rb2)                                             @ b : t3:Real -> (a : t5:Real) # i : t5':Real) 
              | nileE]) 
              --- Intruder Knowledge
              { 
                inI(commit(n(b, rb1), s(b, rb2))                         @ b : t1:Real -> (a : t2:Real) # i : t2':Real),
                inI(n(a, ra1)                                            @ a : t2:Real -> (b : t3:Real) # i : t3':Real),
                inI((n(a, ra1) * n(b, rb1))                              @ b : t3:Real -> (a : t4:Real) # i : t4':Real),
                inI(s(b, rb2)                                            @ b : t3:Real -> (a : t5:Real) # i : t5':Real),
                inI(sign(i, (n(a, ra1) * n(b, rb1)) ; n(a, ra1))         @ i : t6:Real -> a : t7:Real) 
              } 
              }), 
              =>*,
              --- FINAL TERM
              upTerm(
              {(
              --- Intruder
              [nilEe | 
                -((NA':Nonce * NB':Nonce)                                 @ b : t3:Real -> (a : t4:Real) # i : t4':Real), 
                        {t4':Real === t3:Real + dbi:Real and dbi:Real >= 0/1}, 
                -(NA:Nonce                                              @ a : t2:Real -> (b : t3:Real) # i : t3':Real), 
                        {t3':Real === t2:Real + dai:Real and dai:Real >= 0/1}, 
                +(sign(i, (NA':Nonce * NB':Nonce) ; (NA:Nonce))            @ i : t6:Real -> a : t7:Real) , 
              nileE]  
              & 
              --- Alice, verifier
              [nilEe | 
                -(CommitB:NTMsg                                         @ b : t1:Real -> (a : t2:Real) # i : t2':Real), 
                        {t2:Real === t1:Real + dab:Real and dab:Real > 0/1}, 
                +(n(a, ra1)                                             @ a : t2:Real -> (b : t3:Real) # i : t3':Real), 
                -((n(a, ra1) * NB:Nonce)                                @ b : t3:Real -> (a : t4:Real) # i : t4':Real), 
                        {t4:Real === t3:Real + dab:Real and dab:Real > 0/1}, 
                        {(t4:Real - t2:Real) <= (2/1 * d:Real) and d:Real > 0/1}, 
                -(SB:Secret                                             @ b : t3:Real -> (a : t5:Real) # i : t5':Real), 
                        {t5:Real === t3:Real + dab:Real and dab:Real > 0/1}, 
                -(sign(i, (n(a, ra1) * NB:Nonce) ; n(a, ra1))          @ i : t6:Real -> a : t7:Real), 
                        {t7:Real === t6:Real + dai:Real and dai:Real > 0/1}, 
              nileE]  
              & 
              --- Bob, prover
              [nilEe | 
                +(commit(n(b, rb1), s(b, rb2))                          @ b : t1:Real -> (a : t2:Real) # i : t2':Real), 
                -(NA:Nonce                                              @ a : t2:Real -> (b : t3:Real) # i : t3':Real), 
                        {t3:Real === t2:Real + dab:Real and dab:Real > 0/1}, 
                +((NA:Nonce * n(b, rb1))                                @ b : t3:Real -> (a : t4:Real) # i : t4':Real), 
                +(s(b, rb2)                                             @ b : t3:Real -> (a : t5:Real) # i : t5':Real), 
              nileE]) 
              --- Intruder Knowledge
              { 
                nI(commit(n(b, rb1), s(b, rb2))                         @ b : t1:Real -> (a : t2:Real) # i : t2':Real),
                nI(n(a, ra1)                                            @ a : t2:Real -> (b : t3:Real) # i : t3':Real),
                nI((n(a, ra1) * n(b, rb1))                              @ b : t3:Real -> (a : t4:Real) # i : t4':Real),
                nI(s(b, rb2)                                            @ b : t3:Real -> (a : t5:Real) # i : t5':Real),
                nI(sign(i, (n(a, ra1) * n(b, rb1)) ; n(a, ra1))         @ i : t6:Real -> a : t7:Real) 
              } 
              }), 
              smt standard, none, empty, 'true.Boolean, '@, unbounded, unbounded) .